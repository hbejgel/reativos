#include "sdl.ceu"

input void SDL_REDRAW;
input void SDL_QUIT;
input _SDL_KeyboardEvent*    SDL_KEYDOWN;
input _SDL_MouseButtonEvent* SDL_MOUSEBUTTONDOWN;

var _SDL_Window&? win;
	finalize
        win = _SDL_CreateWindow("Basquete", _SDL_WINDOWPOS_CENTERED,
                                         _SDL_WINDOWPOS_CENTERED,
                                         640, 480,
                                         _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(&win);
	end

// Retangulo que representa o background
var int w, h;
_SDL_GetWindowSize(&win, &w, &h);

var _SDL_Rect bg;
    bg.w = w;
    bg.h = h;
    bg.x = 0;
    bg.y = 0;



// Inicializando Renderer
var _SDL_Renderer&? ren;
    finalize
        ren = _SDL_CreateRenderer(&win, -1, 0);
    with
        _SDL_DestroyRenderer(&ren);
    end

class Cesta with
    var _SDL_Renderer& ren;
    var _SDL_Rect r;
do
    // Inicializar Surface da Cesta
    var _SDL_Surface&? c_surface;
        finalize
            c_surface = _SDL_LoadBMP("cesta.bmp");
        with
            _SDL_FreeSurface(&c_surface);
        end

    // Inicializar Texture da Bola
    var _SDL_Texture&? c_texture;
        finalize
            c_texture = _SDL_CreateTextureFromSurface(&ren, c_surface);
        with
            _SDL_DestroyTexture(&c_texture);
        end

    par do
        await FOREVER;
    with
        every SDL_REDRAW do
            _SDL_RenderCopy(&ren, c_texture, 0, &r);
        end
    end
end


class Star with
    var _SDL_Renderer& ren;
    var _SDL_Rect r;
    var int v;
do
    // Inicializar Surface da estrela
    var _SDL_Surface&? s_surface;
        finalize
            s_surface = _SDL_LoadBMP("star.bmp");
        with
            _SDL_FreeSurface(&s_surface);
        end

    // Inicializar Texture da Bola
    var _SDL_Texture&? s_texture;
        finalize
            s_texture = _SDL_CreateTextureFromSurface(&ren, s_surface);
        with
            _SDL_DestroyTexture(&s_texture);
        end

    par/or do
        every (1000/v)ms do
            r.x = r.x + 1;
            if r.x > 600 then
                break;
            end
        end
    with
        every SDL_REDRAW do
            _SDL_RenderCopy(&ren, s_texture, 0, &r);
        end
    end
end


class Ball with
    var _SDL_Renderer& ren;
    var _SDL_Rect r;
    var _SDL_Rect score;
    var int x,y,w,h;
    var int dt;
    var int a;
do

    score.x = 400;
    score.y = 400;
    score.w = 50;
    score.h = 50;
    // Inicializar Surface da Bola
    var _SDL_Surface&? b_surface;
        finalize
            b_surface = _SDL_LoadBMP("basketball.bmp");
        with
            _SDL_FreeSurface(&b_surface);
        end

    // Inicializar Texture da Bola
    var _SDL_Texture&? b_texture;
        finalize
            b_texture = _SDL_CreateTextureFromSurface(&ren, b_surface);
        with
            _SDL_DestroyTexture(&b_texture);
        end

    var _SDL_Color scored_c;
        scored_c.r = 0x00;
        scored_c.g = 0xFF;
        scored_c.b = 0x00;

    var _SDL_Color not_scored_c;
        not_scored_c.r = 0xFF;
        not_scored_c.g = 0x00;
        not_scored_c.b = 0x00;

    var bool scored = true;

    par do
        loop do
            r.x = x;
            r.y = y;
            r.w = w;
            r.h = h;
            a = 1;
            par/or do
                loop do
                    par/or do
                        every (dt)ms do
                            r.x = r.x + 1;
                        end
                    with
                        await (dt*520)ms;
                    end
                    par/or do
                        every (dt)ms do
                            r.x = r.x - 1;
                        end
                    with
                        await (dt*520)ms;
                    end
                end
            with
                await SDL_MOUSEBUTTONDOWN;
            end
            every (5*dt)ms do
                r.y = r.y + a;
                a = a + 1;
                if r.y > 500 then
                    if r.x > 45 and r.x < 90 then
                        scored = true;
                        if dt > 1 then
                            dt = dt-1;
                        end
                    else
                        scored = false;
                        if dt < 3 then
                            dt = dt + 1;
                        end
                    end
                    break;
                end
            end
        end
    with
        every SDL_REDRAW do
            _SDL_RenderCopy(&ren, b_texture, 0, &r);
            if scored then
                _SDL_SetRenderDrawColor(&ren, scored_c.r, scored_c.g, scored_c.b, 0x00);
            else
                _SDL_SetRenderDrawColor(&ren, not_scored_c.r, not_scored_c.g, not_scored_c.b, 0x00);
            end
            _SDL_RenderFillRect(&ren, &score);
        end
    end
end

// Espera o usuÃ¡rio sair, ou executa o loop do jogo
par/or do
    await SDL_QUIT;
    _IMG_Quit();
    _SDL_Quit();
with
    loop do
        par/or do // Reset
            loop do
                var _SDL_KeyboardEvent* key = await SDL_KEYDOWN;
                if key:keysym.sym == _SDLK_r then
                    break;
                end
            end
        with // Limpar Background
            every SDL_REDRAW do
                _SDL_SetRenderDrawColor(&ren, 0xFF,0xFF,0xFF,0x00);
                _SDL_RenderFillRect(&ren, &bg);
            end
        with // Criar Bola e Cesta, Loop das estrelas
            var Ball b with
                this.ren = ren;
                this.x = 20;
                this.y = 50;
                this.w = 100;
                this.h = 100;
                this.dt = 3;
            end;
            var Cesta c with
                this.ren = ren;
                this.r.x = 0;
                this.r.y = 420;
                this.r.w = 200;
                this.r.h = 100;
            end;
            pool Star[10] s;
            every 250ms do
                    spawn Star in s with
                        this.ren    = ren;
                        this.r.x = 50;
                        this.r.y = 20 + _rand()%500;
                        this.r.w = 50;
                        this.r.h = 50;
                        this.v      = 200 + _rand()%200;
                    end;
            end
        with // Desenhar Tudo
            every SDL_REDRAW do
                _SDL_RenderPresent(&ren);
            end
        end
    end
end

escape 0;

